using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class Player
{
    public Image panel;
    public Text text;
    public Button button;
    public Image team;
}

[System.Serializable]
public class PlayerColor
{
    public Color panelColor;
    public Color textColor;
}

[System.Serializable]
public class PlayerSprite
{
    public Sprite playerSpriteChip;
    public Sprite playerSpriteClub;
    public Sprite playerSpriteDiamond;
    public Sprite playerSpriteHeart;
}

public class GameController : MonoBehaviour {

    #region Declarations
    public Text[] buttonList;
    public GameObject gameOverPanel;
    public Text gameOverText;
    public GameObject restartButton;
    public Player playerX;
    public Player playerO;
    public PlayerColor activePlayerColor;
    public PlayerColor inactivePlayerColor;
    public PlayerSprite playerSprites;
    public GameObject startInfo;

    #region Enumeration for State
    public enum PlayerTeam { Chip, Club, Diamond, Heart };
    public static PlayerTeam currentTeam;
    #endregion

    private string playerSide;
    public string playerTeam;
    private int moveCount;
    private SpriteSwapOnClick spriteSwap;

    public Image currentTeamImage;

    public Image TeamChip;
    public Image TeamClub;
    public Image TeamDiamond;
    public Image TeamHeart;
    public Image defaultImage;
    #endregion

    void Awake()
    {
        SetGameControllerReferenceOnButtons();
        gameOverPanel.SetActive(false);
        moveCount = 0;
        restartButton.SetActive(false);
    }

    void StartGame()
    {

        SetBoardInteractable(true);
        SetPlayerButtons(false);
        startInfo.SetActive(false);
    }

    void Update()
    {
        SwapPlayerImage();
        switch (currentTeam)
        {
            case PlayerTeam.Chip:
                Debug.Log("Team is currently Chip");
                break;
            case PlayerTeam.Club:
                Debug.Log("Team is currently Club");
                break;
            case PlayerTeam.Diamond:
                Debug.Log("Team is currently Diamond");
                break;
            case PlayerTeam.Heart:
                Debug.Log("Team is currently Heart");
                break;
        }
    }

    public void RestartGame()
    {
        moveCount = 0;
        gameOverPanel.SetActive(false);
        restartButton.SetActive(false);
        SetPlayerButtons(true);
        SetPlayerColorsInactive();
        startInfo.SetActive(true);

        for (int i = 0; i < buttonList.Length; i++)
        {
            buttonList[i].text = "";
            //buttonList[i].GetComponentInParent<Image>().overrideSprite = defaultSprite;
        }
    }

    void GameOver(string winningPlayer)
    {
        SetBoardInteractable(false);
        if (winningPlayer == "draw")
        {
            SetGameOverText("It's a draw!");
            SetPlayerColorsInactive();
        }
        else
        {
            SetGameOverText(playerSide + " Wins!");
        }
        restartButton.SetActive(true);
    }

    public void SwapPlayerImage()
    {
        switch (currentTeam)
        {
            case PlayerTeam.Chip:
                currentTeamImage = TeamChip;
                Debug.Log("Current team image is Chip");
                break;
            case PlayerTeam.Club:
                currentTeamImage = TeamClub;
                Debug.Log("Current team image is Club");
                break;
            case PlayerTeam.Diamond:
                currentTeamImage = TeamDiamond;
                Debug.Log("Current team image is Diamond");
                break;
            case PlayerTeam.Heart:
                currentTeamImage = TeamHeart;
                Debug.Log("Current team image is Heart");
                break;
        }


    }

    void SetGameControllerReferenceOnButtons()
    {
        for (int i = 0; i < buttonList.Length; i++)
        {
            buttonList[i].GetComponentInParent<GridSpace>().SetGameControllerReference(this);
        }

    }

    public void EndTurn()
    {
        SwapPlayerImage();
        moveCount++;
        if (buttonList[0].text == playerSide && buttonList[1].text == playerSide && buttonList[2].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[3].text == playerSide && buttonList[4].text == playerSide && buttonList[5].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[6].text == playerSide && buttonList[7].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[4].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[4].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[3].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[1].text == playerSide && buttonList[4].text == playerSide && buttonList[7].text == playerSide)
        {
            GameOver(playerSide);
        }
        else if (buttonList[2].text == playerSide && buttonList[5].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }
        else if (moveCount >= 9)
        {
            GameOver("draw");
        }
        else
        {
            ChangeSides();
        }
    }

    public void EndTurn4x4()
    {
        SwapPlayerImage();
        moveCount++;
        if (buttonList[0].text == playerSide && buttonList[1].text == playerSide && buttonList[2].text == playerSide && buttonList[3].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[4].text == playerSide && buttonList[5].text == playerSide && buttonList[6].text == playerSide && buttonList[7].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[8].text == playerSide && buttonList[9].text == playerSide && buttonList[10].text == playerSide && buttonList[11].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[12].text == playerSide && buttonList[13].text == playerSide && buttonList[14].text == playerSide && buttonList[15].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[5].text == playerSide && buttonList[10].text == playerSide && buttonList[15].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[3].text == playerSide && buttonList[6].text == playerSide && buttonList[9].text == playerSide && buttonList[12].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[4].text == playerSide && buttonList[8].text == playerSide && buttonList[12].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[1].text == playerSide && buttonList[5].text == playerSide && buttonList[9].text == playerSide && buttonList[13].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[6].text == playerSide && buttonList[10].text == playerSide && buttonList[14].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[3].text == playerSide && buttonList[7].text == playerSide && buttonList[11].text == playerSide && buttonList[15].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (moveCount >= 16)
        {
            GameOver("draw");
        }
        else
        {
            ChangeSides();
        }
    }

    void ChangeSides()
    {   //conditionalOperator = (condition) ? [true path] : [false path];
        playerSide = (playerSide == "X") ? "O" : "X";

        if (playerSide == "X")
        {
            SetPlayerColors(playerX, playerO);
            
        }
        else
        {
            SetPlayerColors(playerO, playerX);
            //SetPlayerSprite(Player2Sprite);
        }
    }

    void SetPlayerColors(Player newPlayer, Player oldPlayer)
    {
        newPlayer.panel.color = activePlayerColor.panelColor;
        newPlayer.text.color = activePlayerColor.textColor;
        oldPlayer.panel.color = inactivePlayerColor.panelColor;
        oldPlayer.text.color = inactivePlayerColor.textColor;
    }

    void SetGameOverText(string value)
    {
        gameOverPanel.SetActive(true);
        gameOverText.text = value;
    }

    public void SetBoardInteractable(bool toggle)
    {
        for (int i = 0; i < buttonList.Length; i++)
        {
            buttonList[i].GetComponentInParent<Button>().interactable = toggle;
        }
    }

    void SetPlayerButtons(bool toggle)
    {
        playerX.button.interactable = toggle;
        playerO.button.interactable = toggle;
    }

    void SetPlayerColorsInactive()
    {
        playerX.panel.color = inactivePlayerColor.panelColor;
        playerX.text.color = inactivePlayerColor.textColor;
        playerO.panel.color = inactivePlayerColor.panelColor;
        playerO.text.color = inactivePlayerColor.textColor;
    }

    public void SetStartingTeam(string startingTeam)
    {
        playerTeam = startingTeam;

        if (playerTeam == "Chip")
        {
            currentTeam = PlayerTeam.Chip;
        }

        if (playerTeam == "Club")
        {
            currentTeam = PlayerTeam.Club;
        }

        if (playerTeam == "Diamond")
        {
            currentTeam = PlayerTeam.Diamond;
        }

        if (playerTeam == "Heart")
        {
            currentTeam = PlayerTeam.Heart;
        }
    }

    public void SetStartingSide(string startingSide)
    {
        playerSide = startingSide;
        if (playerSide == "X")
        {
            SetPlayerColors(playerX, playerO);
            //SetPlayerSprite(Player1Sprite);
        }
        else
        {
            SetPlayerColors(playerO, playerX);
            //SetPlayerSprite(Player2Sprite);
        }

        StartGame();
    }

    public string GetPlayerSide()
    {
        Debug.Log("Player side is " + playerSide);
        return playerSide;
    }
}
